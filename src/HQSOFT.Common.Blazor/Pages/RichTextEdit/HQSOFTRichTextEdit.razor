
@using Microsoft.JSInterop
@using System.Text.Json
@using Volo.Abp.Identity

@inherits ComponentBase
@inject IJSRuntime JSRuntime
@inject IIdentityUserAppService IdentityUserAppService
 
 
<div @ref="@ToolBarElement">
    @Toolbar
</div>

<div @ref="@QuillElement">
    @Editor
</div>


@code {
    [Parameter] public RenderFragment Editor { get; set; }
    [Parameter] public RenderFragment Toolbar { get; set; }
    [Parameter] public bool ReadOnly { get; set; } = false;
    [Parameter] public string Placeholder { get; set; } = "Start typing @ to mention ...";
    [Parameter] public string Theme { get; set; } = "snow";
    [Parameter] public string DebugLevel { get; set; } = "info";  

    private ElementReference QuillElement;
    private ElementReference ToolBarElement;
    private IEnumerable<IdentityUserDto> UserList { get; set; }

    private async Task GetUserListAsync()
    {
        var input = new GetIdentityUsersInput();
        var result = await IdentityUserAppService.GetListAsync(input);
        UserList = result.Items;
    }

    protected override async Task
        OnAfterRenderAsync(bool firstRender)
    {
        await GetUserListAsync();
        var values = UserList.Select(u => new { id = u.Id, value = u.Name, link = u.Email }).ToArray();
        if (firstRender)
        {
            await QuillInterop.CreateQuill(
                JSRuntime,
                QuillElement,
                ToolBarElement, 
                values,
                ReadOnly,
                Placeholder,
                Theme,
                DebugLevel);
        }
    }

    public async Task<IEnumerable<string>> GetMentionedUsers()
    {
        return await QuillInterop.GetMentionedUsers(JSRuntime, QuillElement);
    }
       
    public async Task<string> GetText()
    {
        return await QuillInterop.GetText(
            JSRuntime, QuillElement);
    }

    public async Task<string> GetHTML()
    {
        return await QuillInterop.GetHTML(
            JSRuntime, QuillElement);
    }

    public async Task<string> GetContent()
    {
        return await QuillInterop.GetContent(
            JSRuntime, QuillElement);
    }

    public async Task ClearAsync()
    {
        await QuillInterop.ClearAsync(JSRuntime, QuillElement);
    }

    public async Task LoadContent(string Content)
    {
        var QuillDelta =
            await QuillInterop.LoadQuillContent(
                JSRuntime, QuillElement, Content);
    }

    public async Task EnableEditor(bool mode)
    {
        var QuillDelta =
            await QuillInterop.EnableQuillEditor(
                JSRuntime, QuillElement, mode);
    }
}